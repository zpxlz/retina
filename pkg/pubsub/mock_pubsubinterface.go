// autogenerated
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/retina/pkg/pubsub (interfaces: PubSubInterface)
//
// Generated by this command:
//
//	mockgen -destination=mock_pubsubinterface.go -copyright_file=../lib/ignore_headers.txt -package=pubsub github.com/microsoft/retina/pkg/pubsub PubSubInterface
//

// Package pubsub is a generated GoMock package.
package pubsub

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPubSubInterface is a mock of PubSubInterface interface.
type MockPubSubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubInterfaceMockRecorder
}

// MockPubSubInterfaceMockRecorder is the mock recorder for MockPubSubInterface.
type MockPubSubInterfaceMockRecorder struct {
	mock *MockPubSubInterface
}

// NewMockPubSubInterface creates a new mock instance.
func NewMockPubSubInterface(ctrl *gomock.Controller) *MockPubSubInterface {
	mock := &MockPubSubInterface{ctrl: ctrl}
	mock.recorder = &MockPubSubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubInterface) EXPECT() *MockPubSubInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPubSubInterface) Publish(arg0 PubSubTopic, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0, arg1)
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubInterfaceMockRecorder) Publish(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubInterface)(nil).Publish), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockPubSubInterface) Subscribe(arg0 PubSubTopic, arg1 *CallBackFunc) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubInterfaceMockRecorder) Subscribe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSubInterface)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockPubSubInterface) Unsubscribe(arg0 PubSubTopic, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockPubSubInterfaceMockRecorder) Unsubscribe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPubSubInterface)(nil).Unsubscribe), arg0, arg1)
}
