// autogenerated
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/retina/pkg/controllers/cache (interfaces: CacheInterface)
//
// Generated by this command:
//
//	mockgen -destination=mock_cacheinterface.go -copyright_file=../../lib/ignore_headers.txt -package=cache github.com/microsoft/retina/pkg/controllers/cache CacheInterface
//

// Package cache is a generated GoMock package.
package cache

import (
	net "net"
	reflect "reflect"

	common "github.com/microsoft/retina/pkg/common"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheInterface is a mock of CacheInterface interface.
type MockCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCacheInterfaceMockRecorder
}

// MockCacheInterfaceMockRecorder is the mock recorder for MockCacheInterface.
type MockCacheInterfaceMockRecorder struct {
	mock *MockCacheInterface
}

// NewMockCacheInterface creates a new mock instance.
func NewMockCacheInterface(ctrl *gomock.Controller) *MockCacheInterface {
	mock := &MockCacheInterface{ctrl: ctrl}
	mock.recorder = &MockCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheInterface) EXPECT() *MockCacheInterfaceMockRecorder {
	return m.recorder
}

// AddAnnotatedNamespace mocks base method.
func (m *MockCacheInterface) AddAnnotatedNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddAnnotatedNamespace", arg0)
}

// AddAnnotatedNamespace indicates an expected call of AddAnnotatedNamespace.
func (mr *MockCacheInterfaceMockRecorder) AddAnnotatedNamespace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnnotatedNamespace", reflect.TypeOf((*MockCacheInterface)(nil).AddAnnotatedNamespace), arg0)
}

// DeleteAnnotatedNamespace mocks base method.
func (m *MockCacheInterface) DeleteAnnotatedNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteAnnotatedNamespace", arg0)
}

// DeleteAnnotatedNamespace indicates an expected call of DeleteAnnotatedNamespace.
func (mr *MockCacheInterfaceMockRecorder) DeleteAnnotatedNamespace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotatedNamespace", reflect.TypeOf((*MockCacheInterface)(nil).DeleteAnnotatedNamespace), arg0)
}

// DeleteRetinaEndpoint mocks base method.
func (m *MockCacheInterface) DeleteRetinaEndpoint(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetinaEndpoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetinaEndpoint indicates an expected call of DeleteRetinaEndpoint.
func (mr *MockCacheInterfaceMockRecorder) DeleteRetinaEndpoint(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetinaEndpoint", reflect.TypeOf((*MockCacheInterface)(nil).DeleteRetinaEndpoint), arg0)
}

// DeleteRetinaNode mocks base method.
func (m *MockCacheInterface) DeleteRetinaNode(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetinaNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetinaNode indicates an expected call of DeleteRetinaNode.
func (mr *MockCacheInterfaceMockRecorder) DeleteRetinaNode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetinaNode", reflect.TypeOf((*MockCacheInterface)(nil).DeleteRetinaNode), arg0)
}

// DeleteRetinaSvc mocks base method.
func (m *MockCacheInterface) DeleteRetinaSvc(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetinaSvc", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRetinaSvc indicates an expected call of DeleteRetinaSvc.
func (mr *MockCacheInterfaceMockRecorder) DeleteRetinaSvc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetinaSvc", reflect.TypeOf((*MockCacheInterface)(nil).DeleteRetinaSvc), arg0)
}

// GetAnnotatedNamespaces mocks base method.
func (m *MockCacheInterface) GetAnnotatedNamespaces() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotatedNamespaces")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAnnotatedNamespaces indicates an expected call of GetAnnotatedNamespaces.
func (mr *MockCacheInterfaceMockRecorder) GetAnnotatedNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotatedNamespaces", reflect.TypeOf((*MockCacheInterface)(nil).GetAnnotatedNamespaces))
}

// GetIPsByNamespace mocks base method.
func (m *MockCacheInterface) GetIPsByNamespace(arg0 string) []net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPsByNamespace", arg0)
	ret0, _ := ret[0].([]net.IP)
	return ret0
}

// GetIPsByNamespace indicates an expected call of GetIPsByNamespace.
func (mr *MockCacheInterfaceMockRecorder) GetIPsByNamespace(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPsByNamespace", reflect.TypeOf((*MockCacheInterface)(nil).GetIPsByNamespace), arg0)
}

// GetNodeByIP mocks base method.
func (m *MockCacheInterface) GetNodeByIP(arg0 string) *common.RetinaNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByIP", arg0)
	ret0, _ := ret[0].(*common.RetinaNode)
	return ret0
}

// GetNodeByIP indicates an expected call of GetNodeByIP.
func (mr *MockCacheInterfaceMockRecorder) GetNodeByIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByIP", reflect.TypeOf((*MockCacheInterface)(nil).GetNodeByIP), arg0)
}

// GetObjByIP mocks base method.
func (m *MockCacheInterface) GetObjByIP(arg0 string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjByIP", arg0)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetObjByIP indicates an expected call of GetObjByIP.
func (mr *MockCacheInterfaceMockRecorder) GetObjByIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjByIP", reflect.TypeOf((*MockCacheInterface)(nil).GetObjByIP), arg0)
}

// GetPodByIP mocks base method.
func (m *MockCacheInterface) GetPodByIP(arg0 string) *common.RetinaEndpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByIP", arg0)
	ret0, _ := ret[0].(*common.RetinaEndpoint)
	return ret0
}

// GetPodByIP indicates an expected call of GetPodByIP.
func (mr *MockCacheInterfaceMockRecorder) GetPodByIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByIP", reflect.TypeOf((*MockCacheInterface)(nil).GetPodByIP), arg0)
}

// GetSvcByIP mocks base method.
func (m *MockCacheInterface) GetSvcByIP(arg0 string) *common.RetinaSvc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSvcByIP", arg0)
	ret0, _ := ret[0].(*common.RetinaSvc)
	return ret0
}

// GetSvcByIP indicates an expected call of GetSvcByIP.
func (mr *MockCacheInterfaceMockRecorder) GetSvcByIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSvcByIP", reflect.TypeOf((*MockCacheInterface)(nil).GetSvcByIP), arg0)
}

// UpdateRetinaEndpoint mocks base method.
func (m *MockCacheInterface) UpdateRetinaEndpoint(arg0 *common.RetinaEndpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetinaEndpoint", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetinaEndpoint indicates an expected call of UpdateRetinaEndpoint.
func (mr *MockCacheInterfaceMockRecorder) UpdateRetinaEndpoint(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetinaEndpoint", reflect.TypeOf((*MockCacheInterface)(nil).UpdateRetinaEndpoint), arg0)
}

// UpdateRetinaNode mocks base method.
func (m *MockCacheInterface) UpdateRetinaNode(arg0 *common.RetinaNode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetinaNode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetinaNode indicates an expected call of UpdateRetinaNode.
func (mr *MockCacheInterfaceMockRecorder) UpdateRetinaNode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetinaNode", reflect.TypeOf((*MockCacheInterface)(nil).UpdateRetinaNode), arg0)
}

// UpdateRetinaSvc mocks base method.
func (m *MockCacheInterface) UpdateRetinaSvc(arg0 *common.RetinaSvc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetinaSvc", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetinaSvc indicates an expected call of UpdateRetinaSvc.
func (mr *MockCacheInterfaceMockRecorder) UpdateRetinaSvc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetinaSvc", reflect.TypeOf((*MockCacheInterface)(nil).UpdateRetinaSvc), arg0)
}
