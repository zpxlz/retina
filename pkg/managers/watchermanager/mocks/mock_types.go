// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mocks/mock_types.go -package=mocks .
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIWatcher is a mock of IWatcher interface.
type MockIWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIWatcherMockRecorder
}

// MockIWatcherMockRecorder is the mock recorder for MockIWatcher.
type MockIWatcherMockRecorder struct {
	mock *MockIWatcher
}

// NewMockIWatcher creates a new mock instance.
func NewMockIWatcher(ctrl *gomock.Controller) *MockIWatcher {
	mock := &MockIWatcher{ctrl: ctrl}
	mock.recorder = &MockIWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWatcher) EXPECT() *MockIWatcherMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockIWatcher) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIWatcherMockRecorder) Init(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIWatcher)(nil).Init), ctx)
}

// Refresh mocks base method.
func (m *MockIWatcher) Refresh(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockIWatcherMockRecorder) Refresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockIWatcher)(nil).Refresh), ctx)
}

// Stop mocks base method.
func (m *MockIWatcher) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIWatcherMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIWatcher)(nil).Stop), ctx)
}

// MockIWatcherManager is a mock of IWatcherManager interface.
type MockIWatcherManager struct {
	ctrl     *gomock.Controller
	recorder *MockIWatcherManagerMockRecorder
}

// MockIWatcherManagerMockRecorder is the mock recorder for MockIWatcherManager.
type MockIWatcherManagerMockRecorder struct {
	mock *MockIWatcherManager
}

// NewMockIWatcherManager creates a new mock instance.
func NewMockIWatcherManager(ctrl *gomock.Controller) *MockIWatcherManager {
	mock := &MockIWatcherManager{ctrl: ctrl}
	mock.recorder = &MockIWatcherManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWatcherManager) EXPECT() *MockIWatcherManagerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockIWatcherManager) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIWatcherManagerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIWatcherManager)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockIWatcherManager) Stop(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIWatcherManagerMockRecorder) Stop(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIWatcherManager)(nil).Stop), ctx)
}
