// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mock_types.go -package=filtermanager
//

// Package filtermanager is a generated GoMock package.
package filtermanager

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// addIP mocks base method.
func (m *MockICache) addIP(arg0 net.IP, arg1 Requestor, arg2 RequestMetadata) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "addIP", arg0, arg1, arg2)
}

// addIP indicates an expected call of addIP.
func (mr *MockICacheMockRecorder) addIP(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addIP", reflect.TypeOf((*MockICache)(nil).addIP), arg0, arg1, arg2)
}

// deleteIP mocks base method.
func (m *MockICache) deleteIP(arg0 net.IP, arg1 Requestor, arg2 RequestMetadata) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteIP", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// deleteIP indicates an expected call of deleteIP.
func (mr *MockICacheMockRecorder) deleteIP(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteIP", reflect.TypeOf((*MockICache)(nil).deleteIP), arg0, arg1, arg2)
}

// hasKey mocks base method.
func (m *MockICache) hasKey(arg0 net.IP) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasKey", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasKey indicates an expected call of hasKey.
func (mr *MockICacheMockRecorder) hasKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasKey", reflect.TypeOf((*MockICache)(nil).hasKey), arg0)
}

// ips mocks base method.
func (m *MockICache) ips() []net.IP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ips")
	ret0, _ := ret[0].([]net.IP)
	return ret0
}

// ips indicates an expected call of ips.
func (mr *MockICacheMockRecorder) ips() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ips", reflect.TypeOf((*MockICache)(nil).ips))
}

// reset mocks base method.
func (m *MockICache) reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "reset")
}

// reset indicates an expected call of reset.
func (mr *MockICacheMockRecorder) reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reset", reflect.TypeOf((*MockICache)(nil).reset))
}

// MockIFilterManager is a mock of IFilterManager interface.
type MockIFilterManager struct {
	ctrl     *gomock.Controller
	recorder *MockIFilterManagerMockRecorder
}

// MockIFilterManagerMockRecorder is the mock recorder for MockIFilterManager.
type MockIFilterManagerMockRecorder struct {
	mock *MockIFilterManager
}

// NewMockIFilterManager creates a new mock instance.
func NewMockIFilterManager(ctrl *gomock.Controller) *MockIFilterManager {
	mock := &MockIFilterManager{ctrl: ctrl}
	mock.recorder = &MockIFilterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFilterManager) EXPECT() *MockIFilterManagerMockRecorder {
	return m.recorder
}

// AddIPs mocks base method.
func (m *MockIFilterManager) AddIPs(arg0 []net.IP, arg1 Requestor, arg2 RequestMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIPs", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIPs indicates an expected call of AddIPs.
func (mr *MockIFilterManagerMockRecorder) AddIPs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIPs", reflect.TypeOf((*MockIFilterManager)(nil).AddIPs), arg0, arg1, arg2)
}

// DeleteIPs mocks base method.
func (m *MockIFilterManager) DeleteIPs(arg0 []net.IP, arg1 Requestor, arg2 RequestMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIPs", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIPs indicates an expected call of DeleteIPs.
func (mr *MockIFilterManagerMockRecorder) DeleteIPs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIPs", reflect.TypeOf((*MockIFilterManager)(nil).DeleteIPs), arg0, arg1, arg2)
}

// HasIP mocks base method.
func (m *MockIFilterManager) HasIP(arg0 net.IP) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasIP", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasIP indicates an expected call of HasIP.
func (mr *MockIFilterManagerMockRecorder) HasIP(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasIP", reflect.TypeOf((*MockIFilterManager)(nil).HasIP), arg0)
}

// Reset mocks base method.
func (m *MockIFilterManager) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockIFilterManagerMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockIFilterManager)(nil).Reset))
}

// Stop mocks base method.
func (m *MockIFilterManager) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIFilterManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIFilterManager)(nil).Stop))
}
