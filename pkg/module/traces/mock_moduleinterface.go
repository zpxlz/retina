// autogenerated
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/retina/pkg/module/traces (interfaces: ModuleInterface)
//
// Generated by this command:
//
//	mockgen -destination=mock_moduleinterface.go -copyright_file=../../lib/ignore_headers.txt -package=traces github.com/microsoft/retina/pkg/module/traces ModuleInterface
//

// Package traces is a generated GoMock package.
package traces

import (
	reflect "reflect"

	v1alpha1 "github.com/microsoft/retina/crd/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockModuleInterface is a mock of ModuleInterface interface.
type MockModuleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModuleInterfaceMockRecorder
}

// MockModuleInterfaceMockRecorder is the mock recorder for MockModuleInterface.
type MockModuleInterfaceMockRecorder struct {
	mock *MockModuleInterface
}

// NewMockModuleInterface creates a new mock instance.
func NewMockModuleInterface(ctrl *gomock.Controller) *MockModuleInterface {
	mock := &MockModuleInterface{ctrl: ctrl}
	mock.recorder = &MockModuleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleInterface) EXPECT() *MockModuleInterfaceMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockModuleInterface) Reconcile(arg0 *v1alpha1.TracesSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockModuleInterfaceMockRecorder) Reconcile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockModuleInterface)(nil).Reconcile), arg0)
}

// Run mocks base method.
func (m *MockModuleInterface) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockModuleInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockModuleInterface)(nil).Run))
}
