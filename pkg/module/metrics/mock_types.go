// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mock_types.go -package=metrics
//

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	flow "github.com/cilium/cilium/api/v1/flow"
	v1alpha1 "github.com/microsoft/retina/crd/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockIModule is a mock of IModule interface.
type MockIModule struct {
	ctrl     *gomock.Controller
	recorder *MockIModuleMockRecorder
}

// MockIModuleMockRecorder is the mock recorder for MockIModule.
type MockIModuleMockRecorder struct {
	mock *MockIModule
}

// NewMockIModule creates a new mock instance.
func NewMockIModule(ctrl *gomock.Controller) *MockIModule {
	mock := &MockIModule{ctrl: ctrl}
	mock.recorder = &MockIModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIModule) EXPECT() *MockIModuleMockRecorder {
	return m.recorder
}

// Reconcile mocks base method.
func (m *MockIModule) Reconcile(spec *v1alpha1.MetricsSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockIModuleMockRecorder) Reconcile(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockIModule)(nil).Reconcile), spec)
}

// MockAdvMetricsInterface is a mock of AdvMetricsInterface interface.
type MockAdvMetricsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdvMetricsInterfaceMockRecorder
}

// MockAdvMetricsInterfaceMockRecorder is the mock recorder for MockAdvMetricsInterface.
type MockAdvMetricsInterfaceMockRecorder struct {
	mock *MockAdvMetricsInterface
}

// NewMockAdvMetricsInterface creates a new mock instance.
func NewMockAdvMetricsInterface(ctrl *gomock.Controller) *MockAdvMetricsInterface {
	mock := &MockAdvMetricsInterface{ctrl: ctrl}
	mock.recorder = &MockAdvMetricsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvMetricsInterface) EXPECT() *MockAdvMetricsInterfaceMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockAdvMetricsInterface) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean.
func (mr *MockAdvMetricsInterfaceMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockAdvMetricsInterface)(nil).Clean))
}

// Init mocks base method.
func (m *MockAdvMetricsInterface) Init(metricName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", metricName)
}

// Init indicates an expected call of Init.
func (mr *MockAdvMetricsInterfaceMockRecorder) Init(metricName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAdvMetricsInterface)(nil).Init), metricName)
}

// ProcessFlow mocks base method.
func (m *MockAdvMetricsInterface) ProcessFlow(f *flow.Flow) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessFlow", f)
}

// ProcessFlow indicates an expected call of ProcessFlow.
func (mr *MockAdvMetricsInterfaceMockRecorder) ProcessFlow(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFlow", reflect.TypeOf((*MockAdvMetricsInterface)(nil).ProcessFlow), f)
}

// MockContextOptionsInterface is a mock of ContextOptionsInterface interface.
type MockContextOptionsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockContextOptionsInterfaceMockRecorder
}

// MockContextOptionsInterfaceMockRecorder is the mock recorder for MockContextOptionsInterface.
type MockContextOptionsInterfaceMockRecorder struct {
	mock *MockContextOptionsInterface
}

// NewMockContextOptionsInterface creates a new mock instance.
func NewMockContextOptionsInterface(ctrl *gomock.Controller) *MockContextOptionsInterface {
	mock := &MockContextOptionsInterface{ctrl: ctrl}
	mock.recorder = &MockContextOptionsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextOptionsInterface) EXPECT() *MockContextOptionsInterfaceMockRecorder {
	return m.recorder
}

// getLabels mocks base method.
func (m *MockContextOptionsInterface) getLabels() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLabels")
	ret0, _ := ret[0].([]string)
	return ret0
}

// getLabels indicates an expected call of getLabels.
func (mr *MockContextOptionsInterfaceMockRecorder) getLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLabels", reflect.TypeOf((*MockContextOptionsInterface)(nil).getLabels))
}

// getLocalCtxValues mocks base method.
func (m *MockContextOptionsInterface) getLocalCtxValues(f *flow.Flow) map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLocalCtxValues", f)
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// getLocalCtxValues indicates an expected call of getLocalCtxValues.
func (mr *MockContextOptionsInterfaceMockRecorder) getLocalCtxValues(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLocalCtxValues", reflect.TypeOf((*MockContextOptionsInterface)(nil).getLocalCtxValues), f)
}

// getValues mocks base method.
func (m *MockContextOptionsInterface) getValues(f *flow.Flow) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getValues", f)
	ret0, _ := ret[0].([]string)
	return ret0
}

// getValues indicates an expected call of getValues.
func (mr *MockContextOptionsInterfaceMockRecorder) getValues(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getValues", reflect.TypeOf((*MockContextOptionsInterface)(nil).getValues), f)
}
