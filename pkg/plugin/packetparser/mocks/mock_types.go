// Code generated by MockGen. DO NOT EDIT.
// Source: types_linux.go
//
// Generated by this command:
//
//	mockgen -source=types_linux.go -destination=mocks/mock_types.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	perf "github.com/cilium/ebpf/perf"
	tc "github.com/florianl/go-tc"
	gomock "go.uber.org/mock/gomock"
)

// MockIQdisc is a mock of IQdisc interface.
type MockIQdisc struct {
	ctrl     *gomock.Controller
	recorder *MockIQdiscMockRecorder
}

// MockIQdiscMockRecorder is the mock recorder for MockIQdisc.
type MockIQdiscMockRecorder struct {
	mock *MockIQdisc
}

// NewMockIQdisc creates a new mock instance.
func NewMockIQdisc(ctrl *gomock.Controller) *MockIQdisc {
	mock := &MockIQdisc{ctrl: ctrl}
	mock.recorder = &MockIQdiscMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIQdisc) EXPECT() *MockIQdiscMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIQdisc) Add(info *tc.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIQdiscMockRecorder) Add(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIQdisc)(nil).Add), info)
}

// Delete mocks base method.
func (m *MockIQdisc) Delete(info *tc.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIQdiscMockRecorder) Delete(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIQdisc)(nil).Delete), info)
}

// MockIFilter is a mock of IFilter interface.
type MockIFilter struct {
	ctrl     *gomock.Controller
	recorder *MockIFilterMockRecorder
}

// MockIFilterMockRecorder is the mock recorder for MockIFilter.
type MockIFilterMockRecorder struct {
	mock *MockIFilter
}

// NewMockIFilter creates a new mock instance.
func NewMockIFilter(ctrl *gomock.Controller) *MockIFilter {
	mock := &MockIFilter{ctrl: ctrl}
	mock.recorder = &MockIFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFilter) EXPECT() *MockIFilterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIFilter) Add(info *tc.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIFilterMockRecorder) Add(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIFilter)(nil).Add), info)
}

// MockITc is a mock of ITc interface.
type MockITc struct {
	ctrl     *gomock.Controller
	recorder *MockITcMockRecorder
}

// MockITcMockRecorder is the mock recorder for MockITc.
type MockITcMockRecorder struct {
	mock *MockITc
}

// NewMockITc creates a new mock instance.
func NewMockITc(ctrl *gomock.Controller) *MockITc {
	mock := &MockITc{ctrl: ctrl}
	mock.recorder = &MockITcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITc) EXPECT() *MockITcMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockITc) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockITcMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockITc)(nil).Close))
}

// Filter mocks base method.
func (m *MockITc) Filter() *tc.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter")
	ret0, _ := ret[0].(*tc.Filter)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockITcMockRecorder) Filter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockITc)(nil).Filter))
}

// Qdisc mocks base method.
func (m *MockITc) Qdisc() *tc.Qdisc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qdisc")
	ret0, _ := ret[0].(*tc.Qdisc)
	return ret0
}

// Qdisc indicates an expected call of Qdisc.
func (mr *MockITcMockRecorder) Qdisc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qdisc", reflect.TypeOf((*MockITc)(nil).Qdisc))
}

// MockIPerf is a mock of IPerf interface.
type MockIPerf struct {
	ctrl     *gomock.Controller
	recorder *MockIPerfMockRecorder
}

// MockIPerfMockRecorder is the mock recorder for MockIPerf.
type MockIPerfMockRecorder struct {
	mock *MockIPerf
}

// NewMockIPerf creates a new mock instance.
func NewMockIPerf(ctrl *gomock.Controller) *MockIPerf {
	mock := &MockIPerf{ctrl: ctrl}
	mock.recorder = &MockIPerfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPerf) EXPECT() *MockIPerfMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIPerf) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIPerfMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPerf)(nil).Close))
}

// Read mocks base method.
func (m *MockIPerf) Read() (perf.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(perf.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIPerfMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIPerf)(nil).Read))
}
